{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","types/sexTypes.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/personLink.tsx","types/sortParams.ts","components/PeopleTable.tsx","utils/fetchClient.ts","types/filterParams.ts","components/PeoplePage.tsx","utils/filteredPeople.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","SexParams","PeopleFilters","setSearchWith","centuries","sex","allCenturies","getCenturiesForSearch","century","includes","filter","c","className","classNames","none","man","women","type","placeholder","onChange","e","query","target","map","Loader","PersonLink","person","selectedPerson","pathname","slug","name","SortTypes","PeopleTable","people","allPeople","order","sort","personSlug","useParams","getParent","personParent","personName","parent","find","handleSortOrder","event","sortOrder","preventDefault","onClick","Name","Sex","Born","Died","born","died","motherName","fatherName","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","QueryParams","PeoplePage","useState","setPeople","isLoading","setIsLoading","isLoadingError","setIsLoadingError","setSearchParams","get","Query","getAll","Centuries","Sort","Order","useEffect","catch","finally","filteredPeople","useMemo","visiblePeople","trim","normalizedQuery","toLowerCase","length","Math","ceil","person1","person2","localeCompare","reverse","filterPeople","newSearch","Navbar","role","isActive","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.78f1d8f5.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SexParams {\n  man = 'm',\n  women = 'f',\n  none = '',\n}\n","import classNames from 'classnames';\nimport { SearchParams } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\nimport { SexParams } from '../types/sexTypes';\n\ntype Props = {\n  setSearchWith:(params: SearchParams) => void,\n  centuries: string[],\n  sex: string,\n};\n\nexport const PeopleFilters: React.FC<Props> = ({\n  setSearchWith,\n  centuries,\n  sex,\n}) => {\n  const allCenturies = [16, 17, 18, 19, 20];\n\n  const getCenturiesForSearch = (century: string) => {\n    return centuries.includes(century)\n      ? centuries.filter(c => c !== century)\n      : [...centuries, century];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': sex === SexParams.none })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === SexParams.man })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === SexParams.women })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={(e) => setSearchWith({ query: e.target.value || null })}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {allCenturies.map(century => (\n              // eslint-disable-next-line react/button-has-type\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                params={{\n                  centuries: getCenturiesForSearch(century.toString()),\n                }}\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century.toString()),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{\n                centuries: allCenturies.map(century => (\n                  century.toString())),\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: [],\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  searchParams: URLSearchParams\n  selectedPerson: string | undefined,\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  person,\n  searchParams,\n  selectedPerson,\n}) => (\n  <Link\n    to={{\n      pathname: selectedPerson\n        ? `../${person.slug}`\n        : `./${person.slug}`,\n      search: searchParams.toString(),\n    }}\n    className={classNames({\n      'has-text-danger': person.sex === 'f',\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","export enum SortTypes {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { PersonLink } from './personLink';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\nimport { SortTypes } from '../types/sortParams';\n\ntype Props = {\n  setSearchWith:(params: SearchParams) => void,\n  people: Person[],\n  allPeople: Person[],\n  order: string,\n  sort: string,\n  searchParams: URLSearchParams,\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  setSearchWith,\n  people,\n  allPeople,\n  order,\n  sort,\n  searchParams,\n}) => {\n  const { personSlug } = useParams();\n\n  const isPersonInList = (personName: string) => (\n    allPeople.find(person => person.name === personName)\n  );\n\n  const getParent = (\n    personParent: string,\n  ) => {\n    const parent = isPersonInList(personParent);\n\n    return parent\n      ? (\n        <PersonLink\n          person={parent}\n          searchParams={searchParams}\n          selectedPerson={personSlug}\n        />\n      )\n      : personParent;\n  };\n\n  const handleSortOrder = (\n    event: React.MouseEvent<HTMLAnchorElement,\n    MouseEvent>, sortOrder: string,\n  ) => {\n    if (order && sort === sortOrder) {\n      setSearchWith({ sort: null, order: null });\n      event.preventDefault();\n    }\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                onClick={(event) => handleSortOrder(event, SortTypes.Name)}\n                params={{\n                  order: (\n                    (sort === SortTypes.Name && !order)\n                      ? 'desc'\n                      : null\n                  ),\n                  sort: SortTypes.Name,\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': (!order && sort === SortTypes.Name),\n                    'fa-sort-down': (order && sort === SortTypes.Name),\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                onClick={(event) => handleSortOrder(event, SortTypes.Sex)}\n                params={{\n                  order: (\n                    (sort === SortTypes.Sex && !order)\n                      ? 'desc'\n                      : null\n                  ),\n                  sort: SortTypes.Sex,\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': (!order && sort === SortTypes.Sex),\n                    'fa-sort-down': (order && sort === SortTypes.Sex),\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                onClick={(event) => handleSortOrder(event, SortTypes.Born)}\n                params={{\n                  order: (\n                    (sort === SortTypes.Born && !order)\n                      ? 'desc'\n                      : null\n                  ),\n                  sort: SortTypes.Born,\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': (!order && sort === SortTypes.Born),\n                    'fa-sort-down': (order && sort === SortTypes.Born),\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                onClick={(event) => handleSortOrder(event, SortTypes.Died)}\n                params={{\n                  order: (\n                    (sort === SortTypes.Died && !order)\n                      ? 'desc'\n                      : null\n                  ),\n                  sort: SortTypes.Died,\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': (!order && sort === SortTypes.Died),\n                    'fa-sort-down': (order && sort === SortTypes.Died),\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': personSlug === person.slug,\n            })}\n          >\n            <td>\n              <PersonLink\n                person={person}\n                searchParams={searchParams}\n                selectedPerson={personSlug}\n              />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.motherName\n                ? getParent(person.motherName)\n                : '-'}\n            </td>\n            <td>\n              {person.fatherName\n                ? getParent(person.fatherName)\n                : '-'}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst peopleUrl\n= 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(url))\n    .then(response => response.json());\n}\n\nexport const clientGet = <T>() => request<T>(peopleUrl);\n","export enum QueryParams {\n  Query = 'query',\n  Sex = 'sex',\n  Centuries = 'centuries',\n  Sort = 'sort',\n  Order = 'order',\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { clientGet } from '../utils/fetchClient';\nimport { filterPeople } from '../utils/filteredPeople';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\nimport { QueryParams } from '../types/filterParams';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get(QueryParams.Query) || '';\n  const sex = searchParams.get(QueryParams.Sex) || '';\n  const centuries = searchParams.getAll(QueryParams.Centuries) || [];\n  const sort = searchParams.get(QueryParams.Sort) || '';\n  const order = searchParams.get(QueryParams.Order) || '';\n\n  useEffect(() => {\n    clientGet<Person[]>()\n      .then(setPeople)\n      .catch(() => setIsLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredPeople = useMemo(() => {\n    return filterPeople(people, {\n      query,\n      centuries,\n      sex,\n      sort,\n      order,\n    });\n  }, [people, query, centuries, sex, sort, order]);\n\n  const setSearchWith = (params: SearchParams) => {\n    const newSearch = getSearchWith(searchParams, params);\n\n    setSearchParams(newSearch.toString());\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters\n                setSearchWith={setSearchWith}\n                centuries={centuries}\n                sex={sex}\n              />\n            </div>\n\n            <div className=\"column\">\n              <div className=\"box table-container\">\n                {isLoadingError ? (\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    Something went wrong\n                  </p>\n                ) : (\n                  <>\n                    {people.length ? (\n                      <>\n                        {filteredPeople.length ? (\n                          <PeopleTable\n                            setSearchWith={setSearchWith}\n                            people={filteredPeople}\n                            allPeople={people}\n                            order={order}\n                            sort={sort}\n                            searchParams={searchParams}\n                          />\n                        ) : (\n                          <p>\n                            There are no people matching\n                            the current search criteria\n                          </p>\n                        )}\n                      </>\n                    ) : (\n                      <p data-cy=\"noPeopleMessage\">\n                        There are no people on the server\n                      </p>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\ntype Filters = {\n  query: string,\n  centuries: string[],\n  sex: string,\n  order: string,\n  sort: string,\n};\n\nexport const filterPeople = (people: Person[], {\n  query = '',\n  centuries = [],\n  sex = '',\n  order = 'asc',\n  sort = '',\n}: Filters): Person[] => {\n  let visiblePeople = [...people];\n\n  if (query.trim() !== '') {\n    const normalizedQuery = query.toLowerCase();\n\n    visiblePeople = visiblePeople.filter(\n      person => person.name.toLowerCase().includes(normalizedQuery)\n        || person.fatherName?.toLowerCase().includes(normalizedQuery)\n        || person.motherName?.toLowerCase().includes(normalizedQuery),\n    );\n  }\n\n  if (centuries.length !== 0) {\n    visiblePeople = visiblePeople.filter(\n      person => centuries.includes(\n        Math.ceil(person.born / 100).toString(),\n      ),\n    );\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(\n      person => person.sex === sex,\n    );\n  }\n\n  if (sort) {\n    visiblePeople.sort((person1, person2) => {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          return person1[sort].localeCompare(person2[sort]);\n\n        case 'born':\n        case 'died':\n          return person1[sort] - person2[sort];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order === 'desc') {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            Home\n          </NavLink>\n          <NavLink\n            to=\"/people\"\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"people\">\n              <Route index element={(<PeoplePage />)} />\n              <Route path=\":personSlug\" element={(<PeoplePage />)} />\n            </Route>\n            <Route\n              path=\"*\"\n              element={\n                <h1 className=\"title\">Page not found</h1>\n              }\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}