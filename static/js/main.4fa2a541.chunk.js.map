{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/personLink.tsx","components/PeopleTable.tsx","utils/fetchClient.ts","components/PeoplePage.tsx","utils/filteredPeople.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","PeopleFilters","allCenturies","setSearchParams","sex","get","centuries","getAll","getCenturiesForSearch","century","includes","filter","c","className","classNames","type","placeholder","onChange","e","newSearch","setSearchWith","query","target","map","Loader","PersonLink","person","selectedPerson","pathname","slug","name","PeopleTable","people","allPeople","order","sort","personSlug","useParams","getParent","personParent","personName","parent","find","onClick","event","preventDefault","born","died","motherName","fatherName","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","isLoadingError","setIsLoadingError","useEffect","catch","finally","filteredPeople","useMemo","visiblePeople","trim","normalizedQuery","toLowerCase","length","Math","ceil","person1","person2","localeCompare","reverse","filterPeople","Navbar","role","isActive","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.4fa2a541.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams,\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters: React.FC = () => {\n  const allCenturies = [16, 17, 18, 19, 20];\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const setSearchWith = (params: SearchParams) => {\n    const newSearch = getSearchWith(searchParams, params);\n\n    setSearchParams(newSearch.toString());\n  };\n\n  const getCenturiesForSearch = (century: string) => {\n    return centuries.includes(century)\n      ? centuries.filter(c => c !== century)\n      : [...centuries, century];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classNames({ 'is-active': sex === '' })}\n          params={{ sex: null }}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === 'm' })}\n          params={{ sex: 'm' }}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          className={classNames({ 'is-active': sex === 'f' })}\n          params={{ sex: 'f' }}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            onChange={(e) => setSearchWith({ query: e.target.value || null })}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {allCenturies.map(century => (\n              // eslint-disable-next-line react/button-has-type\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                params={{\n                  centuries: getCenturiesForSearch(century.toString()),\n                }}\n                className={classNames('button mr-1', {\n                  'is-info': centuries.includes(century.toString()),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{\n                centuries: allCenturies.map(century => (\n                  century.toString())),\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: [],\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person,\n  searchParams: URLSearchParams\n  selectedPerson: string | undefined,\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  person,\n  searchParams,\n  selectedPerson,\n}) => (\n  <Link\n    to={{\n      pathname: selectedPerson\n        ? `../${person.slug}`\n        : `./${person.slug}`,\n      search: searchParams.toString(),\n    }}\n    className={classNames({\n      'has-text-danger': person.sex === 'f',\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\n\nimport { Person } from '../types';\nimport { PersonLink } from './personLink';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[],\n  allPeople: Person[],\n  order: string,\n  sort: string,\n  searchParams: URLSearchParams,\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  allPeople,\n  order,\n  sort,\n  searchParams,\n}) => {\n  const { personSlug } = useParams();\n\n  const isPersonInList = (personName: string) => (\n    allPeople.find(person => person.name === personName)\n  );\n\n  const getParent = (\n    personParent: string,\n  ) => {\n    const parent = isPersonInList(personParent);\n\n    return parent\n      ? (\n        <PersonLink\n          person={parent}\n          searchParams={searchParams}\n          selectedPerson={personSlug}\n        />\n      )\n      : personParent;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink\n                onClick={(event) => (\n                  (order && sort === 'name') && event.preventDefault()\n                )}\n                params={{\n                  order: (\n                    (sort === 'name' && !order)\n                      ? 'desc'\n                      : null\n                  ),\n                  sort: 'name',\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': (!order && sort === 'name'),\n                    'fa-sort-down': (order && sort === 'name'),\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink\n                onClick={(event) => (\n                  (order && sort === 'sex') && event.preventDefault()\n                )}\n                params={{\n                  order: (\n                    (sort === 'sex' && !order)\n                      ? 'desc'\n                      : null\n                  ),\n                  sort: 'sex',\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': (!order && sort === 'sex'),\n                    'fa-sort-down': (order && sort === 'sex'),\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink\n                onClick={(event) => (\n                  (order && sort === 'born') && event.preventDefault()\n                )}\n                params={{\n                  order: (\n                    (sort === 'born' && !order)\n                      ? 'desc'\n                      : null\n                  ),\n                  sort: 'born',\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': (!order && sort === 'born'),\n                    'fa-sort-down': (order && sort === 'born'),\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink\n                onClick={(event) => (\n                  (order && sort === 'died') && event.preventDefault()\n                )}\n                params={{\n                  order: (\n                    (sort === 'died' && !order)\n                      ? 'desc'\n                      : null\n                  ),\n                  sort: 'died',\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('fas fa-sort', {\n                    'fa-sort-up': (!order && sort === 'died'),\n                    'fa-sort-down': (order && sort === 'died'),\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            key={person.slug}\n            data-cy=\"person\"\n            className={classNames({\n              'has-background-warning': personSlug === person.slug,\n            })}\n          >\n            <td>\n              <PersonLink\n                person={person}\n                searchParams={searchParams}\n                selectedPerson={personSlug}\n              />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.motherName\n                ? getParent(person.motherName)\n                : '-'}\n            </td>\n            <td>\n              {person.fatherName\n                ? getParent(person.fatherName)\n                : '-'}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst peopleUrl\n= 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(url))\n    .then(response => response.json());\n}\n\nexport const clientGet = <T>() => request<T>(peopleUrl);\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { clientGet } from '../utils/fetchClient';\nimport { filterPeople } from '../utils/filteredPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  useEffect(() => {\n    clientGet<Person[]>()\n      .then(setPeople)\n      .catch(() => setIsLoadingError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const filteredPeople = useMemo(() => {\n    return filterPeople(people, {\n      query,\n      centuries,\n      sex,\n      sort,\n      order,\n    });\n  }, [people, query, centuries, sex, sort, order]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n\n            <div className=\"column\">\n              <div className=\"box table-container\">\n                {isLoadingError ? (\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    Something went wrong\n                  </p>\n                ) : (\n                  <>\n                    {people.length ? (\n                      <>\n                        {filteredPeople.length ? (\n                          <PeopleTable\n                            people={filteredPeople}\n                            allPeople={people}\n                            order={order}\n                            sort={sort}\n                            searchParams={searchParams}\n                          />\n                        ) : (\n                          <p>\n                            There are no people matching\n                            the current search criteria\n                          </p>\n                        )}\n                      </>\n                    ) : (\n                      <p data-cy=\"noPeopleMessage\">\n                        There are no people on the server\n                      </p>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\ntype Filters = {\n  query: string,\n  centuries: string[],\n  sex: string,\n  order: string,\n  sort: string,\n};\n\nexport const filterPeople = (people: Person[], {\n  query = '',\n  centuries = [],\n  sex = '',\n  order = 'asc',\n  sort = '',\n}: Filters): Person[] => {\n  let visiblePeople = [...people];\n\n  if (query.trim() !== '') {\n    const normalizedQuery = query.toLowerCase();\n\n    visiblePeople = visiblePeople.filter(\n      person => person.name.toLowerCase().includes(normalizedQuery)\n        || person.fatherName?.toLowerCase().includes(normalizedQuery)\n        || person.motherName?.toLowerCase().includes(normalizedQuery),\n    );\n  }\n\n  if (centuries.length !== 0) {\n    visiblePeople = visiblePeople.filter(\n      person => centuries.includes(\n        Math.ceil(person.born / 100).toString(),\n      ),\n    );\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(\n      person => person.sex === sex,\n    );\n  }\n\n  if (sort) {\n    visiblePeople.sort((person1, person2) => {\n      switch (sort) {\n        case 'name':\n        case 'sex':\n          return person1[sort].localeCompare(person2[sort]);\n\n        case 'born':\n        case 'died':\n          return person1[sort] - person2[sort];\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (order === 'desc') {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            Home\n          </NavLink>\n          <NavLink\n            to=\"/people\"\n            className={({ isActive }) => classNames('navbar-item', {\n              'has-background-grey-lighter': isActive,\n            })}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n            <Route path=\"people\">\n              <Route index element={(<PeoplePage />)} />\n              <Route path=\":personSlug\" element={(<PeoplePage />)} />\n            </Route>\n            <Route\n              path=\"*\"\n              element={\n                <h1 className=\"title\">Page not found</h1>\n              }\n            />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}